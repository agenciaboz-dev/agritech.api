generator client {
    provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Chat{
    id             Int           @id @default(autoincrement())
    users          User[]
    messages       Message[]
}

model Message{
    id             Int           @id @default(autoincrement())
    send        DateTime         @db.Date
    text        String?
    audio       String?     
    
    chat        Chat             @relation(fields: [chatId],references: [id],onDelete: Cascade)
    chatId      Int              @unique
}

model User{
    id              Int          @id @default(autoincrement())
    name            String      
    cpf             String       @unique
    birth           DateTime?    @db.Date
    phone           String?
    image           String?      @db.Text
    image64         String?  
    username        String       @unique
    email           String       @unique
    password        String  
    isAdmin         Boolean      @default(false)
    approved        Boolean      @default(false)
    rejected        String?   
    office          String    

    calls           Call[]
    chats           Chat[]

    address         Address?    
    employee        Employee?
    producer        Producer?
}

model Address{
    id              Int           @id @default(autoincrement())
    street          String      
    district        String  
    number          String
    cep             String
    city            String
    uf              String
    adjunct         String

    user            User?         @relation(fields: [userId],references: [id], onDelete: Cascade)
    userId          Int?          @unique

    tillage         Tillage?      @relation(fields: [tillageId],references: [id])
    tillageId       Int?          @unique       

}

model Producer{
    id              Int          @id @default(autoincrement())
    cnpj            String       @unique
    contract        Boolean      @default(false)

    user            User         @relation(fields: [userid],references: [id],onDelete: Cascade)
    userid          Int          @unique

    employee        Employee?    @relation(fields: [employeeId],references: [id])
    employeeId      Int?         


    tillage         Tillage[]    
    call            Call[]

    hectarePrice    Float?


}

model Tillage{
    id              Int          @id @default(autoincrement())
    name            String      
    area            String      
    owner           String
    ceo             String
    manager         String?
    agronomist      String?
    technician      String?
    pilot           String?
    others          String?
    comments        String?      @db.Text

    address         Address?

    location        Coordinate[]
    gallery         Gallery[]


    producer         Producer?     @relation(fields: [producerId],references: [id],onDelete: Cascade)
    producerId       Int?  

    call            Call?

}

model Coordinate{
    id              Int           @id @default(autoincrement())
    x               String      
    y               String

    tillage         Tillage       @relation(fields: [tillageId],references: [id],onDelete: Cascade)
    tillageId       Int          
}

model Gallery{
    id              Int           @id @default(autoincrement())
    images          GalleryImage[]

    tillage         Tillage       @relation(fields: [tillageId],references: [id],onDelete: Cascade)
    tillageId       Int           @unique
    
}

model GalleryImage {

    id              Int           @id @default(autoincrement())
    url             String
    galleryId       Int
    gallery         Gallery       @relation(fields: [galleryId], references: [id], onDelete: Cascade)
}

model Employee{
    id              Int           @id @default(autoincrement())
    rg              String        @unique
    gender          String
    relationship    String  
    nationality     String
    voter_card      String        //@unique     //number
    work_card       String        //@unique     //number
    military        String?       @db.Text      //url
    residence       String        @db.Text      //url   
    office          String        @default("")

    bank            Bank?
    professional    Professional?

    user            User          @relation(fields: [userid],references: [id],onDelete: Cascade)
    userid          Int           @unique

    kits            Kit[]         


    producers       Producer[]
    calendars       Calendar[]
    
}

model Bank{
    id              Int           @id @default(autoincrement())
    name            String      
    agency          String
    type            String
    account         String

    employee        Employee      @relation(fields: [employeeId],references: [id],onDelete: Cascade)
    employeeId      Int           @unique
}


model Professional{
    id              Int           @id @default(autoincrement())
    department      String  
    office          String
    admission       DateTime      @db.Date
    salary          String
    work_time       DateTime      @db.Time()

    employee        Employee      @relation(fields: [employeeId],references: [id],onDelete: Cascade)
    employeeId      Int           @unique

}

model Calendar {
    id              Int           @id @default(autoincrement())
    name            String

    employee        Employee?     @relation(fields: [employeeId],references: [id])
    employeeId      Int?          @unique

    kit             Kit?         @relation(fields: [kitId],references: [id])
    kitId           Int?         @unique
}

enum CallStatus {
    OPEN
    INPROGRESS
    CLOSED
    CANCELED
}

enum CallStages {
    STAGE0
    STAGE1
    STAGE2
    STAGE3
    STAGE4
}
model Call {
    id              Int           @id @default(autoincrement())
    forecast        String        @default("")
    open            String?       @default("")
    init            String?       @default("")
    finish          String?       @default("")
    approved        Boolean?      @default(false)
    comments        String?       @db.Text @default("")
    status          CallStatus    @default(OPEN)

    stage           CallStages    @default(STAGE0)
    stages          Stage[]
    
    report          Report?
    totalPrice      Float?   
    
    tillage         Tillage?        @relation(fields: [tillageId],references: [id])
    tillageId       Int?            @unique

    kit             Kit?           @relation(fields: [kitId],references: [id])
    kitId           Int?         

    producer        Producer?      @relation(fields: [producerId],references: [id],onDelete: Cascade)
    producerId      Int?              

    user            User?          @relation(fields: [userId],references: [id],onDelete: Cascade)
    userId          Int?          
}


model Stage {
    id              Int           @id @default(autoincrement())
    name            String?
    date            String?     
    start           String?    
    finish          String?     
    duration        String?
    comments        String?       @db.Text

    callId          Int
    call            Call          @relation(fields: [callId],references: [id],onDelete: Cascade)
    
}

model Kit {
    id              Int           @id @default(autoincrement())
    image           String?       @db.Text
    image64         String?     
    name            String
    description     String
    active          Boolean      @default(false)
    hectareDay      Float
    objects         Object[]
    employees       Employee[]  
    calls           Call[]        

    calendar        Calendar?
}

model Object {
    id              Int           @id @default(autoincrement())
    name            String
    description     String
    quantity        Int

    kit             Kit?          @relation(fields: [kitId],references: [id],onDelete: Cascade)
    kitId           Int?          
}




model Report {
    id              Int           @id @default(autoincrement())
    areaTrabalhada  Float         @default(0)
    date            String?       @default("")
    hour            String?       @default("") 
    call            Call          @relation(fields: [callId],references: [id],onDelete: Cascade)
    callId          Int           @unique

    operation       Operation?
    treatment       Treatment?
    material        Material[]
    techReport      TechReport?

}
model Operation {
    id              Int           @id @default(autoincrement())
    service         String
    culture         String
    areaMap         Float
    equipment       String
    model           String

    report          Report        @relation(fields: [reportId],references: [id],onDelete: Cascade)
    reportId        Int           @unique

}
model Treatment {
    id              Int           @id @default(autoincrement())

    products        Product[]

    report          Report        @relation(fields: [reportId],references: [id],onDelete: Cascade)
    reportId        Int           @unique

}

model Product{ 
    id              Int             @id @default(autoincrement())
    name            String          
    dosage          Float     
    unit            String      

    treatment       Treatment        @relation(fields: [treatmentId],references: [id],onDelete: Cascade)
    treatmentId     Int           
}

model Material{
    id              Int           @id @default(autoincrement())
    talhao          String
    area            Float
    product         String
    dosage          Float
    classification  String
    total           Float
    removed         Float
    applied         Float
    returned        Float
    comments        String        @db.Text

    report          Report        @relation(fields: [reportId],references: [id],onDelete: Cascade)
    reportId        Int           
}

model TechReport{
    id              Int           @id @default(autoincrement())
    date            String        
    init            String      
    finish          String      
    comments        String        @db.Text

    flight          Flight[]

    report          Report        @relation(fields: [reportId],references: [id],onDelete: Cascade)
    reportId        Int           @unique

}

model Flight{
    id              Int           @id @default(autoincrement())
    temperature     Float
    humidity        Float
    wind_velocity   Float
    height          Float
    faixa           Float
    flight_velocity Float
    tank_volume     Float
    rate            Float
    performance     Float

    techReport      TechReport    @relation(fields: [techReportId],references: [id],onDelete: Cascade)
    techReportId    Int           
}
