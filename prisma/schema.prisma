generator client {
    provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User{
    id              Int         @id @default(autoincrement())
    username        String      @unique
    email           String      @unique
    password        String  
    name            String      
    cpf             String
    birth           DateTime?   @db.Date
    phone           String?
    image           String?     @db.Text
    image64         String?  
    isAdmin         Boolean     @default(false)
    approved        Boolean     @default(false)
    rejected        String?     
    
    address         Address?    

    employee        Employee?
    producer        Producer?

     

}

model Employee{
    id              Int         @id @default(autoincrement())
    rg              String      @unique
    gender          String
    relationship    String  
    nationality     String
    voter_card      String      @unique     //number
    work_card       String      @unique     //number
    military        String?     @db.Text    //url
    residence       String      @db.Text    //url   

    bank_data       Bank?
    professional    Professional?

    user            User        @relation(fields: [userid],references: [id],onDelete: Cascade)
    userid          Int         @unique
    
}

model Producer{
    id              Int         @id @default(autoincrement())
    cnpj            String      @unique

    user            User        @relation(fields: [userid],references: [id],onDelete: Cascade)
    userid          Int         @unique

    tillage         Tillage[]
}

model Address{
    id          Int         @id @default(autoincrement())
    street      String      
    district    String  
    number      String
    cep         String
    city        String
    uf          String
    complement  String

    user        User        @relation(fields: [userId],references: [id], onDelete: Cascade)
    userId      Int          @unique

    // tillage     Tillage?      @relation(fields: [tillageId],references: [id])
    // tillageId   Int          @unique       

}

model Bank{
    id          Int         @id @default(autoincrement())
    name        String      
    agency      String
    type        String
    account     String

    employee    Employee    @relation(fields: [employeeId],references: [id],onDelete: Cascade)
    employeeId  Int         @unique
}


model Professional{
    id          Int         @id @default(autoincrement())
    department  String  
    office      String
    admission   DateTime    @db.Date
    salary      String
    work_time   DateTime    @db.Time()

    employee    Employee    @relation(fields: [employeeId],references: [id],onDelete: Cascade)
    employeeId  Int         @unique

}
model Tillage{
    id          Int         @id @default(autoincrement())
    name        String      
    area        String      
    owner       String
    ceo         String
    manager     String
    agronomist  String
    technician  String
    others      String
    commments   String

    //address         Address?     
    local_tillage   Coordinate[]
    gallery         Gallery[]

    producer    Producer    @relation(fields: [producerId],references: [id],onDelete: Cascade)
    producerId  Int         @unique

}
model Coordinate{
    id          Int         @id @default(autoincrement())
    x           String      
    y           String

    tillage     Tillage     @relation(fields: [tillageId],references: [id],onDelete: Cascade)
    tillageId   Int         @unique
}

model Gallery{
    id          Int         @id @default(autoincrement())
    image       String?     @db.Text    //array

    tillage     Tillage     @relation(fields: [tillageId],references: [id],onDelete: Cascade)
    tillageId   Int         @unique
    
}
  